#include <fstream>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_odeiv2.h>
#include <gsl/gsl_sf_coulomb.h>
#include <gsl/gsl_sf_gamma.h>
#include <gsl/gsl_sf_legendre.h>
#include <stdlib.h>
#include <gsl/gsl_math.h>
#include <gsl/gsl_monte.h>
#include <gsl/gsl_monte_plain.h>
#include <gsl/gsl_monte_miser.h>
#include <gsl/gsl_monte_vegas.h>
#include <iostream>
#include <math.h>
#include <stdio.h>
#include <string>
#include <vector>
using namespace std;


class generalParametersClass {
public:
generalParametersClass(double H_, double RMAX_, int LMAX_, double EPSILON_);
int N;
double RMAX;
double RMIN;
double H;
int LMIN;
int LMAX;
double EPSILON;
vector<double> R;
};

generalParametersClass::generalParametersClass(double H_, double RMAXTRIAL_, int LMAX_, double EPSILON_)
{
    RMIN    = 1E-6;
    LMIN    = 0;
    LMAX    = LMAX_;
    EPSILON = EPSILON_;
    H       = H_;
    N       = 0;
    double iteratorR;
    for (iteratorR = RMIN; iteratorR <= RMAXTRIAL_; iteratorR = iteratorR + H)
    {
        R.push_back(iteratorR);
        N++;
    }
    RMAX = iteratorR;
}


class partitionClass {
public:
partitionClass(const char * name, bool energyLab, double energy, double m1,
               double m2, int z1, int z2, generalParametersClass &parameters);
string name;
double hBarSquared;
bool energyLab;
double energy;
double m1, m2;
int z1, z2;
double m, twoMuDevidedByhBarSquared;
double k, kSquared;
int N;
double RMAX;
double n;
vector<double> coulombPhase;
vector<double> coulombF;
vector<double> coulombG;
vector<double> coulombFPrime;
vector<double> coulombGPrime;
vector<double> sMatrixRe;
vector<double> sMatrixIm;
vector<double> rowWaveFunctionRe;
vector<double> rowWaveFunctionIm;
vector<double> rowWaveFunctionPrimeRe;
vector<double> rowWaveFunctionPrimeIm;
vector<vector<double> > waveFunctionRe;
vector<vector<double> > waveFunctionIm;
vector<vector<double> > waveFunctionPrimeRe;
vector<vector<double> > waveFunctionPrimeIm;
bool
boundStateQ();


void
setWoodsSaxonRe(double V0_, double R0_, double a0_);


void
setWoodsSaxonIm(double W0_, double R0_, double a0_);


void
setCoulombR(double Rc_);


void
nuclearAmplitude(double theta, double * amplitude);


void
coulombAmplitude(double theta, double * amplitude);


double
getWoodSaxonVolumeIm(double R);


double
getWoodSaxonVolumeRe(double R);


double
getCoulombPotential(double R);


void
applyRungeKuttaMethod(generalParametersClass &parameter);


void
normalizeWaveFunctions(generalParametersClass &parameter);

void
setCoulombPhase();


double
kernelFunction(double R);


double V0_r, R0_r, a0_r;
double V0_i, R0_i, a0_i;
double Rc;
int l;
int
setCoulombWaveFunctions(generalParametersClass &parameter);


double
getDifferentialCrossSection(double theta);


void
printWaveFunction(generalParametersClass &parameter);


void
getSmatrix(generalParametersClass &parameter);


private:
};

partitionClass::partitionClass(const char * nameChar, bool energyLabBool,
                               double energyDouble, double m1Double,
                               double m2Double, int z1Int, int z2Int,
                               generalParametersClass &parameters)
/* using Initializer List */
    : rowWaveFunctionRe(parameters.N, 0.0),
    rowWaveFunctionIm(parameters.N, 0.0),
    rowWaveFunctionPrimeRe(parameters.N, 0.0),
    rowWaveFunctionPrimeIm(parameters.N, 0.0),
    waveFunctionRe(parameters.LMAX + 1, rowWaveFunctionRe),
    waveFunctionIm(parameters.LMAX + 1, rowWaveFunctionIm),
    waveFunctionPrimeRe(parameters.LMAX + 1, rowWaveFunctionPrimeRe),
    waveFunctionPrimeIm(parameters.LMAX + 1, rowWaveFunctionPrimeIm)
{
    hBarSquared = 41.801651165221026;
    name        = nameChar;
    energyLab   = energyLabBool;
    energy      = energyDouble;
    m1          = m1Double;
    m2          = m2Double;
    z1          = z1Int;
    z2          = z2Int;
    N=parameters.N;
    RMAX =parameters.RMAX;
    if (energyLab)
        energy = energy * m2 / (m1 + m2);
    m = m1 * m2 / (m1 + m2);
    /* 2*amu/hbar^2 = 0.0478450 */
    twoMuDevidedByhBarSquared = 2 * m / hBarSquared;
    kSquared                  = 2 * m * energy / hBarSquared;
    k                         = sqrt(abs(kSquared));
    n                         = z1 * z2 * 1.4399764 * m / hBarSquared / k;
    coulombPhase.resize(parameters.LMAX + 1, 0.0);
    coulombF.resize(parameters.LMAX + 1, 0.0);
    coulombG.resize(parameters.LMAX + 1, 0.0);
    coulombFPrime.resize(parameters.LMAX + 1, 0.0);
    coulombGPrime.resize(parameters.LMAX + 1, 0.0);
    sMatrixRe.resize(parameters.LMAX + 1, 0.0);
    sMatrixIm.resize(parameters.LMAX + 1, 0.0);
}


double deltaInRungeKutta(double * chi)
{
    return((chi[0] + 2 * chi[1] + 2 * chi[2] + chi[3]) / 6.0);
}


void
partitionClass::applyRungeKuttaMethod(generalParametersClass &parameter)
{
    double chi[4];
    double mu[4];
    double upsilon[4];
    double eta[4];
    double xi, yi, mi, ni;
    double Ri;
    double h = parameter.H;
    double Vi, ViPlus, ViPlusHalf;
    double fi, fiPlus, fiPlusHalf;

    for (int l = parameter.LMIN; l <= parameter.LMAX; l++)
    {
        waveFunctionRe[l][0]      = 0.0;
        waveFunctionPrimeRe[l][0] = 0.001;
        waveFunctionIm[l][0]      = 0.0;
        waveFunctionPrimeIm[l][0] = 0.001;
        for (int i = 0; i < parameter.N; i++)
        {
            xi = waveFunctionRe[l][i];
            mi = waveFunctionPrimeRe[l][i];
            yi = waveFunctionIm[l][i];
            ni = waveFunctionPrimeIm[l][i];
            Ri = parameter.R[i];


            Vi         = getWoodSaxonVolumeIm(Ri);
            ViPlus     = getWoodSaxonVolumeIm(Ri + h);
            ViPlusHalf = getWoodSaxonVolumeIm(Ri + 0.5 * h);

            fi         = kernelFunction(Ri);
            fiPlus     = kernelFunction(Ri + h);
            fiPlusHalf = kernelFunction(Ri + 0.5 * h);

            chi[0]     = h * mi;
            mu[0]      = h * (-fi * xi - Vi * yi);
            upsilon[0] = h * ni;
            eta[0]     = h * (-fi * yi + Vi * xi);

            chi[1]     = h * (mi + 0.5 * mu[0]);
            mu[1]      = h * (-fiPlusHalf * (xi + 0.5 * chi[0]) - ViPlusHalf * (yi + 0.5 * upsilon[0]));
            upsilon[1] = h * (ni + 0.5 * eta[0]);
            eta[1]     = h * (-fiPlusHalf * (yi + 0.5 * upsilon[0]) + ViPlusHalf * (xi + 0.5 * chi[0]));

            chi[2]     = h * (mi + 0.5 * mu[1]);
            mu[2]      = h * (-fiPlusHalf * (xi + 0.5 * chi[1]) - ViPlusHalf * (yi + 0.5 * upsilon[1]));
            upsilon[2] = h * (ni + 0.5 * eta[1]);
            eta[2]     = h * (-fiPlusHalf * (yi + 0.5 * upsilon[1]) + ViPlusHalf * (xi + 0.5 * chi[1]));

            chi[3]     = h * (mi + mu[2]);
            mu[3]      = h * (-fiPlus * (xi + chi[2]) - ViPlus * (yi + upsilon[2]));
            upsilon[3] = h * (ni + eta[2]);
            eta[3]     = h * (-fiPlus * (yi + upsilon[2]) + ViPlus * (xi + chi[2]));

            waveFunctionRe[l][i + 1]      = xi + deltaInRungeKutta(chi);
            waveFunctionPrimeRe[l][i + 1] = mi + deltaInRungeKutta(mu);
            waveFunctionIm[l][i + 1]      = yi + deltaInRungeKutta(upsilon);
            waveFunctionPrimeIm[l][i + 1] = ni + deltaInRungeKutta(eta);

            //    printf("%f\t%f\n", Ri, ni);
        }
    }
} /* partitionClass::applyRungeKuttaMethod */


void
partitionClass::setWoodsSaxonRe(double V0_, double R0_, double a0_)
{
    V0_r = V0_;
    R0_r = R0_;
    a0_r = a0_;
}


void
partitionClass::setWoodsSaxonIm(double W0_, double R0_, double a0_)
{
    V0_i = W0_;
    R0_i = R0_;
    a0_i = a0_;
}


void
partitionClass::setCoulombR(double Rc_)
{
    Rc = Rc_;
}


double
partitionClass::getWoodSaxonVolumeRe(double R)
{
    return(-twoMuDevidedByhBarSquared * V0_r / (1 + exp((R - R0_r) / a0_r)));
}


double
partitionClass::getWoodSaxonVolumeIm(double R)
{
    return(-twoMuDevidedByhBarSquared * V0_i / (1 + exp((R - R0_i) / a0_i)));
}


double
partitionClass::getCoulombPotential(double R)
{
    if (R > Rc)
        return(twoMuDevidedByhBarSquared *
               z1 * z2 * 1.43997 / R);
    else
        return(twoMuDevidedByhBarSquared *
               z1 * z2 * 1.43997 * (3 - R * R / Rc / Rc) / Rc * 0.5);
}


void
partitionClass::getSmatrix(generalParametersClass &parameter)
{
    setCoulombWaveFunctions(parameter);
    double a, b, c, d;
    double A, B, C, D;
    double x1, x2;
    double y1, y2;
    double F1, F2;
    double G1, G2;
    double AsquaredPlusBsquared;
    for (int l_ = parameter.LMIN; l_ <= parameter.LMAX; l_++)
    {
        x1                   = waveFunctionRe[l_][parameter.N - 2];
        x2                   = waveFunctionPrimeRe[l_][parameter.N - 2];
        y1                   = waveFunctionIm[l_][parameter.N - 2];
        y2                   = waveFunctionPrimeIm[l_][parameter.N - 2];
        F1                   = coulombF[l_];
        F2                   = k * coulombFPrime[l_];
        G1                   = coulombG[l_];
        G2                   = k * coulombGPrime[l_];
        a                    = x2 * F1 - x1 * F2;
        b                    = y1 * G2 - y2 * G1;
        c                    = y2 * F1 - y1 * F2;
        d                    = x1 * G2 - x2 * G1;
        A                    = b - a;
        B                    = -c - d;
        C                    = a + b;
        D                    = c - d;
        AsquaredPlusBsquared = A * A + B * B;
        sMatrixRe[l_]        = (A * C + B * D) / AsquaredPlusBsquared;
        sMatrixIm[l_]        = (A * D - B * C) / AsquaredPlusBsquared;
        /*
         *    printf("%d\t% .15f\n",l_,
         *         sqrt(pow(sMatrixRe[l_],2)+pow(sMatrixIm[l_],2)));
         * G1, G2);
         */
    }
} /* partitionClass::getSmatrix */


void
partitionClass::normalizeWaveFunctions(generalParametersClass &parameter)
{
    double S1, S2;
    double N1, N2;
    double A, B;
    double x, y;
    double F, G;
    double xEx, yEx;

    for (int l_ = parameter.LMIN; l_ <= parameter.LMAX; l_++)
    {
        x  = waveFunctionRe[l_][parameter.N - 2];
        y  = waveFunctionIm[l_][parameter.N - 2];
        S1 = sMatrixRe[l_];
        S2 = sMatrixIm[l_];
        F  = coulombF[l_];
        G  = coulombG[l_];
        A  = (1 + S1) * F + S2 * G;
        B  = (1 - S1) * G + S2 * F;
        N1 = (A * x + B * y) / (x * x + y * y);
        N2 = (B * x - A * y) / (x * x + y * y);
        for (int i = 0; i < parameter.N; i++)
        {
            xEx                   = waveFunctionRe[l_][i];
            yEx                   = waveFunctionIm[l_][i];
            waveFunctionRe[l_][i] = N1 * xEx - N2 * yEx;
            waveFunctionIm[l_][i] = N1 * yEx + N2 * xEx;
        }
    }
} /* partitionClass::normalizeWaveFunctions */


void
partitionClass::printWaveFunction(generalParametersClass &parameter)
{
    FILE   * pFile;
    string filename = name + ".wfn";

    pFile = fopen(filename.data(), "w");
    fprintf(pFile, "# Wave Function For the ");
    fprintf(pFile, "%s", name.data());
    fprintf(pFile, " partition \n");

    if (boundStateQ())
    {
        fprintf(pFile, "# R [fm]     Psi \n");
        for (int i = 0; i < parameter.N; i++)
        {
            fprintf(pFile, "% .3e\t% .5e\n", parameter.R[i], waveFunctionRe[l][i]);
        }
    }
    else
    {
        fprintf(pFile, "# R [fm]       ");
        for (int l_ = parameter.LMIN; l_ <= parameter.LMAX; l_++)
        {
            fprintf(pFile, "PsiRe[%d]      PsiIm[%d]        ", l_, l_);
        }
        fprintf(pFile, "\n");
        for (int Ri = 0; Ri < parameter.N; Ri++)
        {
            fprintf(pFile, "% .3e\t", parameter.R[Ri]);

            for (int l_ = parameter.LMIN; l_ <= parameter.LMAX; l_++)
            {
                fprintf(pFile, "% .5e\t% .5e\t\t", waveFunctionRe[l_][Ri],
                        waveFunctionIm[l_][Ri]);
            }
            fprintf(pFile, "\n");
        }
    }
    fclose(pFile);
} /* partitionClass::printWaveFunction */


double
partitionClass::kernelFunction(double R)
{
    return(kSquared - l * (l + 1) / R / R
           - getWoodSaxonVolumeRe(R) - getCoulombPotential(R));
}


bool
partitionClass::boundStateQ()
{
    if (energy < 0)
        return(true);
    else
        return(false);
}


void
applyNumerovMethodFor(partitionClass &partition,
                      generalParametersClass &parameter)
{
    double gamma = parameter.H * parameter.H / 12.0;
    double gammaSquared = gamma * gamma;
    double Wip1, Wi, Wim1;
    double Vip1, Vi, Vim1;
    double xim1, xi;
    double yim1, yi;

    double A1, B1, C1, D1, E;
    double A2, B2, C2, D2;

    for (int l_ = parameter.LMIN; l_ <= parameter.LMAX; l_++)
    {
        partition.l                          = l_;
        partition.waveFunctionRe[l_][0]      = 0.0;
        partition.waveFunctionRe[l_][1]      = 0.01;
        partition.waveFunctionIm[l_][0]      = 0.0;
        partition.waveFunctionIm[l_][1]      = 0.01;
        partition.waveFunctionPrimeRe[l_][0] = 0.01;
        partition.waveFunctionPrimeIm[l_][0] = 0.01;
        for (int i = 1; i < parameter.N; i++)
        {
            Wip1 = partition.kernelFunction(parameter.R[i + 1]);
            Wi   = partition.kernelFunction(parameter.R[i]);
            Wim1 = partition.kernelFunction(parameter.R[i - 1]);

            Vip1 = partition.getWoodSaxonVolumeIm(parameter.R[i + 1]);
            Vi   = partition.getWoodSaxonVolumeIm(parameter.R[i]);
            Vim1 = partition.getWoodSaxonVolumeIm(parameter.R[i - 1]);

            xim1 = partition.waveFunctionRe[l_][i - 1];
            xi   = partition.waveFunctionRe[l_][i];

            yim1 = partition.waveFunctionIm[l_][i - 1];
            yi   = partition.waveFunctionIm[l_][i];

            A1 = xi * (2 - 10 * gammaSquared * Vi * Vip1 - 10 * gamma * Wi + 2 * gamma * Wip1
                       - 10 * gammaSquared * Wi * Wip1);
            B1 = xim1 * (-1 - gammaSquared * Vim1 * Vip1 - gamma * Wim1 - gamma * Wip1
                         - gammaSquared * Wim1 * Wip1);
            C1 = yi * (-10 * gamma * Vi - 2 * gamma * Vip1 + 10 * gammaSquared * Vip1 * Wi
                       - 10 * gammaSquared * Vi * Wip1);
            D1 = yim1 * (-gamma * Vim1 + gamma * Vip1 + gammaSquared * Vip1 * Wim1
                         - gammaSquared * Vim1 * Wip1);


            A2 = xi * (10 * gamma * Vi + 2 * gamma * Vip1 - 10 * gammaSquared * Vip1 * Wi
                       + 10 * gammaSquared * Vi * Wip1);
            B2 = xim1 * (gamma * Vim1 - gamma * Vip1 - gammaSquared * Vip1 * Wim1
                         + gammaSquared * Vim1 * Wip1);
            C2 = yi * (2 - 10 * gammaSquared * Vi * Vip1 - 10 * gamma * Wi + 2 * gamma * Wip1
                       - 10 * gammaSquared * Wi * Wip1);
            D2 = yim1 * (-1 - gammaSquared * Vim1 * Vip1 - gamma * Wim1 - gamma * Wip1
                         - gammaSquared * Wim1 * Wip1);
            E = 1 + gammaSquared * Vip1 * Vip1 + 2 * gamma * Wip1 + gammaSquared * Wip1 * Wip1;

            partition.waveFunctionRe[l_][i + 1]  = (A1 + B1 + C1 + D1) / E;
            partition.waveFunctionIm[l_][i + 1]  = (A2 + B2 + C2 + D2) / E;
            partition.waveFunctionPrimeRe[l_][i] =
                (partition.waveFunctionRe[l_][i + 1] - xim1) / parameter.H / 2.;
            partition.waveFunctionPrimeIm[l_][i] =
                (partition.waveFunctionIm[l_][i + 1] - yim1) / parameter.H / 2.;
        }
    }
} /* applyNumerovMethodFor */


void
fitDepthOfPotential(partitionClass &partition,
                    generalParametersClass &parameters,
                    double deviation = 0.2)
{
    /*
     *      double leftTest=  partition.V0_r -partition.V0_r *deviation;
     *      double rightTest= partition.V0_r +partition.V0_r *deviation;
     *
     *      partition.V0_r= leftTest;
     *      applyFiniteDiffMethodFor(partition, parameters);
     *      double leftFunction =partition.waveFunctionRe[parameters.N-1];
     *      partition.V0_r=rightTest;
     *      applyFiniteDiffMethodFor(partition, parameters);
     *      double rightFunction =partition.waveFunctionRe[parameters.N-1];
     *
     *      if(leftFunction<rightFunction) {
     *              double temp;
     *              temp =rightTest;
     *              rightTest =leftTest;
     *              leftTest =temp;
     *      }
     *      cout<<"FOR THE PARTITION " <<partition.name<<": "<<endl;
     *      printf("THE DEPTH IN THE RANGE FROM %.3f TO %.3f IS BEING FITTED \n",
     * leftTest, rightTest); double waveFunctionAssimp; double
     * middleTest=leftTest; bool test =false; int rootCounter=0; while ( !test ) {
     *              middleTest =(rightTest +leftTest) /2;
     *              partition.V0_r =middleTest;
     *              applyFiniteDiffMethodFor(partition, parameters);
     *              waveFunctionAssimp = partition.waveFunctionRe[parameters.N-1];
     *              test =  waveFunctionAssimp < parameters.EPSILON
     *                                           && waveFunctionAssimp > 0.0;
     *              if( waveFunctionAssimp > 0) leftTest =middleTest;
     *              else rightTest= middleTest;
     *              rootCounter++;
     *              if (rootCounter > 100) break;
     *              //        printf("%d \t %.9f \n",rootCounter, middleTest );
     *      }
     *
     *      if (test) printf("THE DEPTH V0 FITTED INTO %.5f WITH %d TRIAL\n\n",
     * middleTest, rootCounter);
     *
     *      else printf("WARNING: COULDN'T FIT THE DEPTH OF THE POTENTIAL!\n\n" );
     */
}


int
partitionClass::setCoulombWaveFunctions(
    generalParametersClass &parameters)
{
    double F_exponent, G_exponent;

    /*    printf("%f\n", parameters.R[parameters.N-2]); */
    return(gsl_sf_coulomb_wave_FGp_array(
               parameters.LMIN, parameters.LMAX,
               n, k * parameters.R[parameters.N - 2],         /* attention: derivative of F'(x) and G'(x) goes over x=kr */
               /*    1.0, 5.0, */
               &coulombF[0], &coulombFPrime[0], &coulombG[0], &coulombGPrime[0],
               &F_exponent, &G_exponent));
}


void
partitionClass::setCoulombPhase()
{
    gsl_sf_result arg;
    gsl_sf_result lnr;

    for (size_t l_ = 0; l_ <= coulombPhase.size(); l_++)
    {
        gsl_sf_lngamma_complex_e(1 + l_, n, &lnr, &arg);
        coulombPhase[l_] = arg.val;
        /*    printf("%d\t%f\t% .6e\n",l_, arg.val,arg.err); */
    }
}


void
partitionClass::coulombAmplitude(double theta, double * amplitude)
{
    double argument;
    double a;

    a            = -n / 2 / k / sin(0.5 * theta) / sin(0.5 * theta);
    argument     = n * log(sin(0.5 * theta) * sin(0.5 * theta)) - 2 * coulombPhase[0];
    amplitude[0] = a * cos(argument);
    amplitude[1] = -a * sin(argument);
}


void
partitionClass::nuclearAmplitude(double theta, double * amplitude)
{
    double a, b1, b2, c;

    amplitude[0] = 0;
    amplitude[1] = 0;
    for (size_t l = 0; l < coulombPhase.size(); l++)
    {
        a  = (2 * l + 1.0);
        b1 = cos(2 * coulombPhase[l]) * sMatrixIm[l]
             + sin(2 * coulombPhase[l]) * (sMatrixRe[l] - 1.0);
        b2 = sin(2 * coulombPhase[l]) * sMatrixIm[l]
             - cos(2 * coulombPhase[l]) * (sMatrixRe[l] - 1.0);
        c            = gsl_sf_legendre_Pl(l, cos(theta));
        amplitude[0] = amplitude[0] + a * b1 * c / 2.0 / k;
        amplitude[1] = amplitude[1] + a * b2 * c / 2.0 / k;
    }
}


double
partitionClass::getDifferentialCrossSection(double theta)
{
    double differentialCrossSection;
    double a1, a2;
    double coulAmplitude[2], nuclAmplitude[2];

    coulombAmplitude(theta, coulAmplitude);
    nuclearAmplitude(theta, nuclAmplitude);
    a1                       = 1.0 * coulAmplitude[0] + 1.0 * nuclAmplitude[0];
    a2                       = 1.0 * coulAmplitude[1] + 1.0 * nuclAmplitude[1];
    differentialCrossSection = a1 * a1 + a2 * a2;
    return(differentialCrossSection);
}


/* Computation of the integral,
 *
 *    I = int (dx dy dz)/(2pi)^3  1/(1-cos(x)cos(y)cos(z))
 *
 * over (-pi,-pi,-pi) to (+pi, +pi, +pi).  The exact answer
 * is Gamma(1/4)^4/(4 pi^3).  This example is taken from
 * C.Itzykson, J.M.Drouffe, "Statistical Field Theory -
 * Volume 1", Section 1.1, p21, which cites the original
 * paper M.L.Glasser, I.J.Zucker, Proc.Natl.Acad.Sci.USA 74
 * 1800 (1977) */

/* For simplicity we compute the integral over the region
 * (0,0,0) -> (pi,pi,pi) and multiply by 8 */

double exact = 0.4844730731296846;

double
g(double * k, size_t dim, void * params)
{
    (void) (dim);     /* avoid unused parameter warnings */
    (void) (params);
    /*  double A = 1.0 / (M_PI * M_PI * M_PI); */
    return(exp(-k[0] * k[0] - k[1] * k[1] - k[2] * k[2]
               - k[3] * k[3] - k[4] * k[4] - k[5] * k[5]));
}


void
display_results(char * title, double result, double error)
{
    printf("%s ==================\n", title);
    printf("result = % .6f\n", result);
    printf("sigma  = % .6f\n", error);
    printf("exact  = % .6f\n", exact);
    printf("error  = % .6f = %.2g sigma\n", result - exact,
           fabs(result - exact) / error);
}


int
integrateMonteCarlo(void)
{
    double             res, err;
    double             mohmoh = 50.0;
    double             xl[6]  = { 0, 0, 0, 0, 0, 0 };
    double             xu[6]  = { mohmoh, mohmoh, mohmoh, mohmoh, mohmoh, mohmoh };

    const gsl_rng_type * T;
    gsl_rng            * r;

    gsl_monte_function G = { &g, 6, NULL };

    size_t             calls = 50000;

    gsl_rng_env_setup();

    T = gsl_rng_default;
    r = gsl_rng_alloc(T);


    {
        gsl_monte_miser_state * s = gsl_monte_miser_alloc(6);
        gsl_monte_miser_integrate(&G, xl, xu, 6, calls, r, s,
                                  &res, &err);
        gsl_monte_miser_free(s);

        //      display_results("miser", res, err);
    }

    {
        gsl_monte_vegas_state * s = gsl_monte_vegas_alloc(6);

        gsl_monte_vegas_integrate(&G, xl, xu, 6, 10000, r, s,
                                  &res, &err);
//        display_results("vegas warm-up", res, err);

        printf("converging...\n");

        do
        {
            gsl_monte_vegas_integrate(&G, xl, xu, 6, calls / 5, r, s,
                                      &res, &err);
            printf("result = % .6f sigma = % .6f "
                   "chisq/dof = %.1f\n", res, err, gsl_monte_vegas_chisq(s));
        }while (fabs(gsl_monte_vegas_chisq(s) - 1.0) > 0.5);

//        display_results("vegas final", res, err);

        gsl_monte_vegas_free(s);
    }


    gsl_rng_free(r);

    return(0);
} /* integrateMonteCarlo */


int
main(void)
{
    generalParametersClass generalParameters(0.05, 20.0, 43, 1.E-6); // h RmaxTrial lMax, eps
    printf("%f\t%f\t%d\n", generalParameters.RMIN, generalParameters.RMAX, generalParameters.N);
    //  return 0;

    partitionClass firstPartition("4He_12C", true, 72.0, 4., 12., 2, 6, generalParameters);

    firstPartition.setWoodsSaxonRe(150., 1.938, 0.65);
    firstPartition.setWoodsSaxonIm(4.0, 1.938, 0.65);
    firstPartition.setCoulombR(1.938);

    firstPartition.setCoulombPhase();

    /*        fitDepthOfPotential(firstPartition, generalParameters, 0.5); */
    //  firstPartition.applyRungeKuttaMethod(generalParameters);
    applyNumerovMethodFor(firstPartition, generalParameters);
    firstPartition.getSmatrix(generalParameters);
    firstPartition.normalizeWaveFunctions(generalParameters);
    firstPartition.printWaveFunction(generalParameters);


    for (double theta = 1.001; theta < 180.001; theta++)
    {
        printf("%f\t%f\n", theta, firstPartition.getDifferentialCrossSection(theta / 180.0 * 3.14));
    }


    return(0);
} /* main */
